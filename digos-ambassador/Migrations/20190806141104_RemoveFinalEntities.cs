// <auto-generated />
#pragma warning disable CS1591
// ReSharper disable RedundantArgumentDefaultValue
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantUsingDirective
using System;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace DIGOS.Ambassador.Migrations
{
    public partial class RemoveFinalEntities : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            // Finally!
            /*
            migrationBuilder.DropTable(
                name: "RoleplayParticipants",
                schema: "RoleplayModule");

            migrationBuilder.DropTable(
                name: "UserMessages",
                schema: "RoleplayModule");

            migrationBuilder.DropTable(
                name: "AppearanceComponents",
                schema: "TransformationModule");

            migrationBuilder.DropTable(
                name: "UserProtectionEntries",
                schema: "TransformationModule");

            migrationBuilder.DropTable(
                name: "Roleplays",
                schema: "RoleplayModule");

            migrationBuilder.DropTable(
                name: "Appearances",
                schema: "TransformationModule");

            migrationBuilder.DropTable(
                name: "Transformations",
                schema: "TransformationModule");

            migrationBuilder.DropTable(
                name: "GlobalUserProtections",
                schema: "TransformationModule");

            migrationBuilder.DropTable(
                name: "Colours",
                schema: "TransformationModule");

            migrationBuilder.DropTable(
                name: "Species",
                schema: "TransformationModule");

            migrationBuilder.DropTable(
                name: "Users",
                schema: "Core");
            */
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            // Finally!
            /*
            migrationBuilder.EnsureSchema(
                name: "RoleplayModule");

            migrationBuilder.EnsureSchema(
                name: "Core");

            migrationBuilder.EnsureSchema(
                name: "TransformationModule");

            migrationBuilder.CreateTable(
                name: "Users",
                schema: "Core",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn),
                    Bio = table.Column<string>(nullable: true),
                    Class = table.Column<int>(nullable: false),
                    DiscordID = table.Column<long>(nullable: false),
                    HideNewRoleplays = table.Column<bool>(nullable: false),
                    Timezone = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Appearances",
                schema: "TransformationModule",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn),
                    GenderScale = table.Column<double>(nullable: false),
                    Height = table.Column<double>(nullable: false),
                    Muscularity = table.Column<double>(nullable: false),
                    Weight = table.Column<double>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Appearances", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Colours",
                schema: "TransformationModule",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn),
                    Modifier = table.Column<int>(nullable: true),
                    Shade = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Colours", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Species",
                schema: "TransformationModule",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn),
                    Description = table.Column<string>(nullable: false),
                    Name = table.Column<string>(nullable: false),
                    ParentID = table.Column<long>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Species", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Species_Species_ParentID",
                        column: x => x.ParentID,
                        principalSchema: "TransformationModule",
                        principalTable: "Species",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Roleplays",
                schema: "RoleplayModule",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn),
                    ActiveChannelID = table.Column<long>(nullable: true),
                    DedicatedChannelID = table.Column<long>(nullable: true),
                    IsActive = table.Column<bool>(nullable: false),
                    IsNSFW = table.Column<bool>(nullable: false),
                    IsPublic = table.Column<bool>(nullable: false),
                    LastUpdated = table.Column<DateTime>(nullable: true),
                    Name = table.Column<string>(nullable: true),
                    OwnerID = table.Column<long>(nullable: false),
                    ServerID = table.Column<long>(nullable: false),
                    Summary = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Roleplays", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Roleplays_Users_OwnerID",
                        column: x => x.OwnerID,
                        principalSchema: "Core",
                        principalTable: "Users",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "GlobalUserProtections",
                schema: "TransformationModule",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn),
                    DefaultOptIn = table.Column<bool>(nullable: false),
                    DefaultType = table.Column<int>(nullable: false),
                    UserID = table.Column<long>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GlobalUserProtections", x => x.ID);
                    table.ForeignKey(
                        name: "FK_GlobalUserProtections_Users_UserID",
                        column: x => x.UserID,
                        principalSchema: "Core",
                        principalTable: "Users",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Transformations",
                schema: "TransformationModule",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn),
                    DefaultBaseColourID = table.Column<long>(nullable: false),
                    DefaultPattern = table.Column<int>(nullable: true),
                    DefaultPatternColourID = table.Column<long>(nullable: true),
                    Description = table.Column<string>(nullable: false),
                    GrowMessage = table.Column<string>(nullable: false),
                    IsNSFW = table.Column<bool>(nullable: false),
                    Part = table.Column<int>(nullable: false),
                    ShiftMessage = table.Column<string>(nullable: false),
                    SingleDescription = table.Column<string>(nullable: false),
                    SpeciesID = table.Column<long>(nullable: false),
                    UniformDescription = table.Column<string>(nullable: true),
                    UniformGrowMessage = table.Column<string>(nullable: true),
                    UniformShiftMessage = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Transformations", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Transformations_Colours_DefaultBaseColourID",
                        column: x => x.DefaultBaseColourID,
                        principalSchema: "TransformationModule",
                        principalTable: "Colours",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Transformations_Colours_DefaultPatternColourID",
                        column: x => x.DefaultPatternColourID,
                        principalSchema: "TransformationModule",
                        principalTable: "Colours",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Transformations_Species_SpeciesID",
                        column: x => x.SpeciesID,
                        principalSchema: "TransformationModule",
                        principalTable: "Species",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "RoleplayParticipants",
                schema: "RoleplayModule",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn),
                    RoleplayID = table.Column<long>(nullable: false),
                    Status = table.Column<int>(nullable: false),
                    UserID = table.Column<long>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RoleplayParticipants", x => x.ID);
                    table.ForeignKey(
                        name: "FK_RoleplayParticipants_Roleplays_RoleplayID",
                        column: x => x.RoleplayID,
                        principalSchema: "RoleplayModule",
                        principalTable: "Roleplays",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_RoleplayParticipants_Users_UserID",
                        column: x => x.UserID,
                        principalSchema: "Core",
                        principalTable: "Users",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UserMessages",
                schema: "RoleplayModule",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn),
                    AuthorDiscordID = table.Column<long>(nullable: false),
                    AuthorNickname = table.Column<string>(nullable: true),
                    Contents = table.Column<string>(nullable: true),
                    DiscordMessageID = table.Column<long>(nullable: false),
                    RoleplayID = table.Column<long>(nullable: false),
                    Timestamp = table.Column<DateTimeOffset>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserMessages", x => x.ID);
                    table.ForeignKey(
                        name: "FK_UserMessages_Roleplays_RoleplayID",
                        column: x => x.RoleplayID,
                        principalSchema: "RoleplayModule",
                        principalTable: "Roleplays",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "UserProtectionEntries",
                schema: "TransformationModule",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn),
                    GlobalProtectionID = table.Column<long>(nullable: false),
                    Type = table.Column<int>(nullable: false),
                    UserID = table.Column<long>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserProtectionEntries", x => x.ID);
                    table.ForeignKey(
                        name: "FK_UserProtectionEntries_GlobalUserProtections_GlobalProtectionID",
                        column: x => x.GlobalProtectionID,
                        principalSchema: "TransformationModule",
                        principalTable: "GlobalUserProtections",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_UserProtectionEntries_Users_UserID",
                        column: x => x.UserID,
                        principalSchema: "Core",
                        principalTable: "Users",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AppearanceComponents",
                schema: "TransformationModule",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn),
                    AppearanceID = table.Column<long>(nullable: false),
                    BaseColourID = table.Column<long>(nullable: false),
                    Chirality = table.Column<int>(nullable: false),
                    Pattern = table.Column<int>(nullable: true),
                    PatternColourID = table.Column<long>(nullable: true),
                    Size = table.Column<int>(nullable: false),
                    TransformationID = table.Column<long>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AppearanceComponents", x => x.ID);
                    table.ForeignKey(
                        name: "FK_AppearanceComponents_Appearances_AppearanceID",
                        column: x => x.AppearanceID,
                        principalSchema: "TransformationModule",
                        principalTable: "Appearances",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AppearanceComponents_Colours_BaseColourID",
                        column: x => x.BaseColourID,
                        principalSchema: "TransformationModule",
                        principalTable: "Colours",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AppearanceComponents_Colours_PatternColourID",
                        column: x => x.PatternColourID,
                        principalSchema: "TransformationModule",
                        principalTable: "Colours",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AppearanceComponents_Transformations_TransformationID",
                        column: x => x.TransformationID,
                        principalSchema: "TransformationModule",
                        principalTable: "Transformations",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_RoleplayParticipants_RoleplayID",
                schema: "RoleplayModule",
                table: "RoleplayParticipants",
                column: "RoleplayID");

            migrationBuilder.CreateIndex(
                name: "IX_RoleplayParticipants_UserID",
                schema: "RoleplayModule",
                table: "RoleplayParticipants",
                column: "UserID");

            migrationBuilder.CreateIndex(
                name: "IX_Roleplays_OwnerID",
                schema: "RoleplayModule",
                table: "Roleplays",
                column: "OwnerID");

            migrationBuilder.CreateIndex(
                name: "IX_UserMessages_RoleplayID",
                schema: "RoleplayModule",
                table: "UserMessages",
                column: "RoleplayID");

            migrationBuilder.CreateIndex(
                name: "IX_AppearanceComponents_AppearanceID",
                schema: "TransformationModule",
                table: "AppearanceComponents",
                column: "AppearanceID");

            migrationBuilder.CreateIndex(
                name: "IX_AppearanceComponents_BaseColourID",
                schema: "TransformationModule",
                table: "AppearanceComponents",
                column: "BaseColourID");

            migrationBuilder.CreateIndex(
                name: "IX_AppearanceComponents_PatternColourID",
                schema: "TransformationModule",
                table: "AppearanceComponents",
                column: "PatternColourID");

            migrationBuilder.CreateIndex(
                name: "IX_AppearanceComponents_TransformationID",
                schema: "TransformationModule",
                table: "AppearanceComponents",
                column: "TransformationID");

            migrationBuilder.CreateIndex(
                name: "IX_GlobalUserProtections_UserID",
                schema: "TransformationModule",
                table: "GlobalUserProtections",
                column: "UserID");

            migrationBuilder.CreateIndex(
                name: "IX_Species_ParentID",
                schema: "TransformationModule",
                table: "Species",
                column: "ParentID");

            migrationBuilder.CreateIndex(
                name: "IX_Transformations_DefaultBaseColourID",
                schema: "TransformationModule",
                table: "Transformations",
                column: "DefaultBaseColourID");

            migrationBuilder.CreateIndex(
                name: "IX_Transformations_DefaultPatternColourID",
                schema: "TransformationModule",
                table: "Transformations",
                column: "DefaultPatternColourID");

            migrationBuilder.CreateIndex(
                name: "IX_Transformations_SpeciesID",
                schema: "TransformationModule",
                table: "Transformations",
                column: "SpeciesID");

            migrationBuilder.CreateIndex(
                name: "IX_UserProtectionEntries_GlobalProtectionID",
                schema: "TransformationModule",
                table: "UserProtectionEntries",
                column: "GlobalProtectionID");

            migrationBuilder.CreateIndex(
                name: "IX_UserProtectionEntries_UserID",
                schema: "TransformationModule",
                table: "UserProtectionEntries",
                column: "UserID");
            */
        }
    }
}
