// <auto-generated />
#pragma warning disable CS1591
// ReSharper disable RedundantArgumentDefaultValue
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantUsingDirective
using Microsoft.EntityFrameworkCore.Migrations;
using System;
using System.Collections.Generic;

namespace DIGOS.Ambassador.Migrations
{
    public partial class InitialCreate : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AppearanceComponent<GenitaliaType>",
                columns: table => new
                {
                    AppearanceComponentID = table.Column<uint>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    BaseColour = table.Column<string>(type: "TEXT", nullable: true),
                    Description = table.Column<int>(type: "INTEGER", nullable: false),
                    Exists = table.Column<bool>(type: "INTEGER", nullable: false),
                    Pattern = table.Column<string>(type: "TEXT", nullable: true),
                    PatternColour = table.Column<string>(type: "TEXT", nullable: true),
                    Size = table.Column<int>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AppearanceComponent<GenitaliaType>", x => x.AppearanceComponentID);
                });

            migrationBuilder.CreateTable(
                name: "AppearanceComponent<string>",
                columns: table => new
                {
                    AppearanceComponentID = table.Column<uint>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    BaseColour = table.Column<string>(type: "TEXT", nullable: true),
                    Description = table.Column<string>(type: "TEXT", nullable: true),
                    Exists = table.Column<bool>(type: "INTEGER", nullable: false),
                    Pattern = table.Column<string>(type: "TEXT", nullable: true),
                    PatternColour = table.Column<string>(type: "TEXT", nullable: true),
                    Size = table.Column<int>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AppearanceComponent<string>", x => x.AppearanceComponentID);
                });

            migrationBuilder.CreateTable(
                name: "AppearanceComponent<SurfaceType>",
                columns: table => new
                {
                    AppearanceComponentID = table.Column<uint>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    BaseColour = table.Column<string>(type: "TEXT", nullable: true),
                    Description = table.Column<int>(type: "INTEGER", nullable: false),
                    Exists = table.Column<bool>(type: "INTEGER", nullable: false),
                    Pattern = table.Column<string>(type: "TEXT", nullable: true),
                    PatternColour = table.Column<string>(type: "TEXT", nullable: true),
                    Size = table.Column<int>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AppearanceComponent<SurfaceType>", x => x.AppearanceComponentID);
                });

            migrationBuilder.CreateTable(
                name: "Dossiers",
                columns: table => new
                {
                    DossierID = table.Column<uint>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Path = table.Column<string>(type: "TEXT", nullable: true),
                    Summary = table.Column<string>(type: "TEXT", nullable: true),
                    Title = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Dossiers", x => x.DossierID);
                });

            migrationBuilder.CreateTable(
                name: "Kinks",
                columns: table => new
                {
                    KinkID = table.Column<uint>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Category = table.Column<int>(type: "INTEGER", nullable: false),
                    Description = table.Column<string>(type: "TEXT", nullable: true),
                    FListID = table.Column<uint>(type: "INTEGER", nullable: false),
                    Name = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Kinks", x => x.KinkID);
                });

            migrationBuilder.CreateTable(
                name: "Species",
                columns: table => new
                {
                    SpeciesID = table.Column<uint>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Description = table.Column<string>(type: "TEXT", nullable: true),
                    Name = table.Column<string>(type: "TEXT", nullable: true),
                    ParentSpeciesID = table.Column<uint>(type: "INTEGER", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Species", x => x.SpeciesID);
                    table.ForeignKey(
                        name: "FK_Species_Species_ParentSpeciesID",
                        column: x => x.ParentSpeciesID,
                        principalTable: "Species",
                        principalColumn: "SpeciesID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Appearance",
                columns: table => new
                {
                    AppearanceID = table.Column<uint>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    ArmsAppearanceComponentID = table.Column<uint>(type: "INTEGER", nullable: true),
                    BodyAppearanceComponentID = table.Column<uint>(type: "INTEGER", nullable: true),
                    EyesAppearanceComponentID = table.Column<uint>(type: "INTEGER", nullable: true),
                    GenderScale = table.Column<float>(type: "REAL", nullable: false),
                    GenitaliaAppearanceComponentID = table.Column<uint>(type: "INTEGER", nullable: true),
                    HairAppearanceComponentID = table.Column<uint>(type: "INTEGER", nullable: true),
                    HeadAppearanceComponentID = table.Column<uint>(type: "INTEGER", nullable: true),
                    Height = table.Column<float>(type: "REAL", nullable: false),
                    LegsAppearanceComponentID = table.Column<uint>(type: "INTEGER", nullable: true),
                    Muscularity = table.Column<float>(type: "REAL", nullable: false),
                    SurfaceAppearanceComponentID = table.Column<uint>(type: "INTEGER", nullable: true),
                    TailAppearanceComponentID = table.Column<uint>(type: "INTEGER", nullable: true),
                    Weight = table.Column<float>(type: "REAL", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Appearance", x => x.AppearanceID);
                    table.ForeignKey(
                        name: "FK_Appearance_AppearanceComponent<string>_ArmsAppearanceComponentID",
                        column: x => x.ArmsAppearanceComponentID,
                        principalTable: "AppearanceComponent<string>",
                        principalColumn: "AppearanceComponentID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Appearance_AppearanceComponent<string>_BodyAppearanceComponentID",
                        column: x => x.BodyAppearanceComponentID,
                        principalTable: "AppearanceComponent<string>",
                        principalColumn: "AppearanceComponentID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Appearance_AppearanceComponent<string>_EyesAppearanceComponentID",
                        column: x => x.EyesAppearanceComponentID,
                        principalTable: "AppearanceComponent<string>",
                        principalColumn: "AppearanceComponentID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Appearance_AppearanceComponent<GenitaliaType>_GenitaliaAppearanceComponentID",
                        column: x => x.GenitaliaAppearanceComponentID,
                        principalTable: "AppearanceComponent<GenitaliaType>",
                        principalColumn: "AppearanceComponentID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Appearance_AppearanceComponent<string>_HairAppearanceComponentID",
                        column: x => x.HairAppearanceComponentID,
                        principalTable: "AppearanceComponent<string>",
                        principalColumn: "AppearanceComponentID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Appearance_AppearanceComponent<string>_HeadAppearanceComponentID",
                        column: x => x.HeadAppearanceComponentID,
                        principalTable: "AppearanceComponent<string>",
                        principalColumn: "AppearanceComponentID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Appearance_AppearanceComponent<string>_LegsAppearanceComponentID",
                        column: x => x.LegsAppearanceComponentID,
                        principalTable: "AppearanceComponent<string>",
                        principalColumn: "AppearanceComponentID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Appearance_AppearanceComponent<SurfaceType>_SurfaceAppearanceComponentID",
                        column: x => x.SurfaceAppearanceComponentID,
                        principalTable: "AppearanceComponent<SurfaceType>",
                        principalColumn: "AppearanceComponentID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Appearance_AppearanceComponent<string>_TailAppearanceComponentID",
                        column: x => x.TailAppearanceComponentID,
                        principalTable: "AppearanceComponent<string>",
                        principalColumn: "AppearanceComponentID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Transformations",
                columns: table => new
                {
                    TransformationID = table.Column<uint>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Description = table.Column<string>(type: "TEXT", nullable: true),
                    GrowMessage = table.Column<string>(type: "TEXT", nullable: true),
                    IsNSFW = table.Column<bool>(type: "INTEGER", nullable: false),
                    Part = table.Column<int>(type: "INTEGER", nullable: false),
                    ShiftMessage = table.Column<string>(type: "TEXT", nullable: true),
                    SingleDescription = table.Column<string>(type: "TEXT", nullable: true),
                    SpeciesID = table.Column<uint>(type: "INTEGER", nullable: true),
                    UniformDescription = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Transformations", x => x.TransformationID);
                    table.ForeignKey(
                        name: "FK_Transformations_Species_SpeciesID",
                        column: x => x.SpeciesID,
                        principalTable: "Species",
                        principalColumn: "SpeciesID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Characters",
                columns: table => new
                {
                    CharacterID = table.Column<uint>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    AvatarUrl = table.Column<string>(type: "TEXT", nullable: true),
                    DefaultAppearanceAppearanceID = table.Column<uint>(type: "INTEGER", nullable: true),
                    Description = table.Column<string>(type: "TEXT", nullable: true),
                    IsNSFW = table.Column<bool>(type: "INTEGER", nullable: false),
                    Name = table.Column<string>(type: "TEXT", nullable: true),
                    Nickname = table.Column<string>(type: "TEXT", nullable: true),
                    OwnerUserID = table.Column<uint>(type: "INTEGER", nullable: true),
                    Summary = table.Column<string>(type: "TEXT", nullable: true),
                    TransformedAppearanceAppearanceID = table.Column<uint>(type: "INTEGER", nullable: true),
                    UserID = table.Column<uint>(type: "INTEGER", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Characters", x => x.CharacterID);
                    table.ForeignKey(
                        name: "FK_Characters_Appearance_DefaultAppearanceAppearanceID",
                        column: x => x.DefaultAppearanceAppearanceID,
                        principalTable: "Appearance",
                        principalColumn: "AppearanceID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Characters_Appearance_TransformedAppearanceAppearanceID",
                        column: x => x.TransformedAppearanceAppearanceID,
                        principalTable: "Appearance",
                        principalColumn: "AppearanceID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Images",
                columns: table => new
                {
                    ImageID = table.Column<uint>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Caption = table.Column<string>(type: "TEXT", nullable: true),
                    CharacterID = table.Column<uint>(type: "INTEGER", nullable: true),
                    IsNSFW = table.Column<bool>(type: "INTEGER", nullable: false),
                    Name = table.Column<string>(type: "TEXT", nullable: true),
                    Url = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Images", x => x.ImageID);
                    table.ForeignKey(
                        name: "FK_Images_Characters_CharacterID",
                        column: x => x.CharacterID,
                        principalTable: "Characters",
                        principalColumn: "CharacterID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Servers",
                columns: table => new
                {
                    ServerID = table.Column<uint>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    CharacterID = table.Column<uint>(type: "INTEGER", nullable: true),
                    DiscordGuildID = table.Column<ulong>(type: "INTEGER", nullable: false),
                    IsNSFW = table.Column<bool>(type: "INTEGER", nullable: false),
                    SuppressPermissonWarnings = table.Column<bool>(type: "INTEGER", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Servers", x => x.ServerID);
                    table.ForeignKey(
                        name: "FK_Servers_Characters_CharacterID",
                        column: x => x.CharacterID,
                        principalTable: "Characters",
                        principalColumn: "CharacterID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    UserID = table.Column<uint>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Bio = table.Column<string>(type: "TEXT", nullable: true),
                    Class = table.Column<int>(type: "INTEGER", nullable: false),
                    DefaultCharacterCharacterID = table.Column<uint>(type: "INTEGER", nullable: true),
                    DiscordID = table.Column<ulong>(type: "INTEGER", nullable: false),
                    RoleplayID = table.Column<uint>(type: "INTEGER", nullable: true),
                    RoleplayID1 = table.Column<uint>(type: "INTEGER", nullable: true),
                    RoleplayID2 = table.Column<uint>(type: "INTEGER", nullable: true),
                    ServerID = table.Column<uint>(type: "INTEGER", nullable: true),
                    Timezone = table.Column<int>(type: "INTEGER", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.UserID);
                    table.ForeignKey(
                        name: "FK_Users_Characters_DefaultCharacterCharacterID",
                        column: x => x.DefaultCharacterCharacterID,
                        principalTable: "Characters",
                        principalColumn: "CharacterID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Users_Servers_ServerID",
                        column: x => x.ServerID,
                        principalTable: "Servers",
                        principalColumn: "ServerID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "GlobalPermissions",
                columns: table => new
                {
                    GlobalPermissionID = table.Column<uint>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Permission = table.Column<int>(type: "INTEGER", nullable: false),
                    Target = table.Column<int>(type: "INTEGER", nullable: false),
                    UserID = table.Column<uint>(type: "INTEGER", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GlobalPermissions", x => x.GlobalPermissionID);
                    table.ForeignKey(
                        name: "FK_GlobalPermissions_Users_UserID",
                        column: x => x.UserID,
                        principalTable: "Users",
                        principalColumn: "UserID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LocalPermissions",
                columns: table => new
                {
                    LocalPermissionID = table.Column<uint>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Permission = table.Column<int>(type: "INTEGER", nullable: false),
                    ServerID = table.Column<uint>(type: "INTEGER", nullable: true),
                    Target = table.Column<int>(type: "INTEGER", nullable: false),
                    UserID = table.Column<uint>(type: "INTEGER", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LocalPermissions", x => x.LocalPermissionID);
                    table.ForeignKey(
                        name: "FK_LocalPermissions_Servers_ServerID",
                        column: x => x.ServerID,
                        principalTable: "Servers",
                        principalColumn: "ServerID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LocalPermissions_Users_UserID",
                        column: x => x.UserID,
                        principalTable: "Users",
                        principalColumn: "UserID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Roleplays",
                columns: table => new
                {
                    RoleplayID = table.Column<uint>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    ActiveChannelID = table.Column<ulong>(type: "INTEGER", nullable: false),
                    IsActive = table.Column<bool>(type: "INTEGER", nullable: false),
                    IsNSFW = table.Column<bool>(type: "INTEGER", nullable: false),
                    IsPublic = table.Column<bool>(type: "INTEGER", nullable: false),
                    Name = table.Column<string>(type: "TEXT", nullable: true),
                    OwnerUserID = table.Column<uint>(type: "INTEGER", nullable: true),
                    Summary = table.Column<string>(type: "TEXT", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Roleplays", x => x.RoleplayID);
                    table.ForeignKey(
                        name: "FK_Roleplays_Users_OwnerUserID",
                        column: x => x.OwnerUserID,
                        principalTable: "Users",
                        principalColumn: "UserID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "UserKink",
                columns: table => new
                {
                    UserKinkID = table.Column<uint>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    KinkID = table.Column<uint>(type: "INTEGER", nullable: true),
                    Preference = table.Column<int>(type: "INTEGER", nullable: false),
                    UserID = table.Column<uint>(type: "INTEGER", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserKink", x => x.UserKinkID);
                    table.ForeignKey(
                        name: "FK_UserKink_Kinks_KinkID",
                        column: x => x.KinkID,
                        principalTable: "Kinks",
                        principalColumn: "KinkID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_UserKink_Users_UserID",
                        column: x => x.UserID,
                        principalTable: "Users",
                        principalColumn: "UserID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "UserMessage",
                columns: table => new
                {
                    UserMessageID = table.Column<uint>(type: "INTEGER", nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    AuthorNickname = table.Column<string>(type: "TEXT", nullable: true),
                    AuthorUserID = table.Column<uint>(type: "INTEGER", nullable: true),
                    Contents = table.Column<string>(type: "TEXT", nullable: true),
                    DiscordMessageID = table.Column<ulong>(type: "INTEGER", nullable: false),
                    RoleplayID = table.Column<uint>(type: "INTEGER", nullable: true),
                    Timestamp = table.Column<DateTimeOffset>(type: "TEXT", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserMessage", x => x.UserMessageID);
                    table.ForeignKey(
                        name: "FK_UserMessage_Users_AuthorUserID",
                        column: x => x.AuthorUserID,
                        principalTable: "Users",
                        principalColumn: "UserID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_UserMessage_Roleplays_RoleplayID",
                        column: x => x.RoleplayID,
                        principalTable: "Roleplays",
                        principalColumn: "RoleplayID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Appearance_ArmsAppearanceComponentID",
                table: "Appearance",
                column: "ArmsAppearanceComponentID");

            migrationBuilder.CreateIndex(
                name: "IX_Appearance_BodyAppearanceComponentID",
                table: "Appearance",
                column: "BodyAppearanceComponentID");

            migrationBuilder.CreateIndex(
                name: "IX_Appearance_EyesAppearanceComponentID",
                table: "Appearance",
                column: "EyesAppearanceComponentID");

            migrationBuilder.CreateIndex(
                name: "IX_Appearance_GenitaliaAppearanceComponentID",
                table: "Appearance",
                column: "GenitaliaAppearanceComponentID");

            migrationBuilder.CreateIndex(
                name: "IX_Appearance_HairAppearanceComponentID",
                table: "Appearance",
                column: "HairAppearanceComponentID");

            migrationBuilder.CreateIndex(
                name: "IX_Appearance_HeadAppearanceComponentID",
                table: "Appearance",
                column: "HeadAppearanceComponentID");

            migrationBuilder.CreateIndex(
                name: "IX_Appearance_LegsAppearanceComponentID",
                table: "Appearance",
                column: "LegsAppearanceComponentID");

            migrationBuilder.CreateIndex(
                name: "IX_Appearance_SurfaceAppearanceComponentID",
                table: "Appearance",
                column: "SurfaceAppearanceComponentID");

            migrationBuilder.CreateIndex(
                name: "IX_Appearance_TailAppearanceComponentID",
                table: "Appearance",
                column: "TailAppearanceComponentID");

            migrationBuilder.CreateIndex(
                name: "IX_Characters_DefaultAppearanceAppearanceID",
                table: "Characters",
                column: "DefaultAppearanceAppearanceID");

            migrationBuilder.CreateIndex(
                name: "IX_Characters_OwnerUserID",
                table: "Characters",
                column: "OwnerUserID");

            migrationBuilder.CreateIndex(
                name: "IX_Characters_TransformedAppearanceAppearanceID",
                table: "Characters",
                column: "TransformedAppearanceAppearanceID");

            migrationBuilder.CreateIndex(
                name: "IX_Characters_UserID",
                table: "Characters",
                column: "UserID");

            migrationBuilder.CreateIndex(
                name: "IX_GlobalPermissions_UserID",
                table: "GlobalPermissions",
                column: "UserID");

            migrationBuilder.CreateIndex(
                name: "IX_Images_CharacterID",
                table: "Images",
                column: "CharacterID");

            migrationBuilder.CreateIndex(
                name: "IX_LocalPermissions_ServerID",
                table: "LocalPermissions",
                column: "ServerID");

            migrationBuilder.CreateIndex(
                name: "IX_LocalPermissions_UserID",
                table: "LocalPermissions",
                column: "UserID");

            migrationBuilder.CreateIndex(
                name: "IX_Roleplays_OwnerUserID",
                table: "Roleplays",
                column: "OwnerUserID");

            migrationBuilder.CreateIndex(
                name: "IX_Servers_CharacterID",
                table: "Servers",
                column: "CharacterID");

            migrationBuilder.CreateIndex(
                name: "IX_Species_ParentSpeciesID",
                table: "Species",
                column: "ParentSpeciesID");

            migrationBuilder.CreateIndex(
                name: "IX_Transformations_SpeciesID",
                table: "Transformations",
                column: "SpeciesID");

            migrationBuilder.CreateIndex(
                name: "IX_UserKink_KinkID",
                table: "UserKink",
                column: "KinkID");

            migrationBuilder.CreateIndex(
                name: "IX_UserKink_UserID",
                table: "UserKink",
                column: "UserID");

            migrationBuilder.CreateIndex(
                name: "IX_UserMessage_AuthorUserID",
                table: "UserMessage",
                column: "AuthorUserID");

            migrationBuilder.CreateIndex(
                name: "IX_UserMessage_RoleplayID",
                table: "UserMessage",
                column: "RoleplayID");

            migrationBuilder.CreateIndex(
                name: "IX_Users_DefaultCharacterCharacterID",
                table: "Users",
                column: "DefaultCharacterCharacterID");

            migrationBuilder.CreateIndex(
                name: "IX_Users_RoleplayID",
                table: "Users",
                column: "RoleplayID");

            migrationBuilder.CreateIndex(
                name: "IX_Users_RoleplayID1",
                table: "Users",
                column: "RoleplayID1");

            migrationBuilder.CreateIndex(
                name: "IX_Users_RoleplayID2",
                table: "Users",
                column: "RoleplayID2");

            migrationBuilder.CreateIndex(
                name: "IX_Users_ServerID",
                table: "Users",
                column: "ServerID");

            migrationBuilder.AddForeignKey(
                name: "FK_Characters_Users_OwnerUserID",
                table: "Characters",
                column: "OwnerUserID",
                principalTable: "Users",
                principalColumn: "UserID",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Characters_Users_UserID",
                table: "Characters",
                column: "UserID",
                principalTable: "Users",
                principalColumn: "UserID",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Users_Roleplays_RoleplayID",
                table: "Users",
                column: "RoleplayID",
                principalTable: "Roleplays",
                principalColumn: "RoleplayID",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Users_Roleplays_RoleplayID1",
                table: "Users",
                column: "RoleplayID1",
                principalTable: "Roleplays",
                principalColumn: "RoleplayID",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Users_Roleplays_RoleplayID2",
                table: "Users",
                column: "RoleplayID2",
                principalTable: "Roleplays",
                principalColumn: "RoleplayID",
                onDelete: ReferentialAction.Restrict);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Appearance_AppearanceComponent<string>_ArmsAppearanceComponentID",
                table: "Appearance");

            migrationBuilder.DropForeignKey(
                name: "FK_Appearance_AppearanceComponent<string>_BodyAppearanceComponentID",
                table: "Appearance");

            migrationBuilder.DropForeignKey(
                name: "FK_Appearance_AppearanceComponent<string>_EyesAppearanceComponentID",
                table: "Appearance");

            migrationBuilder.DropForeignKey(
                name: "FK_Appearance_AppearanceComponent<string>_HairAppearanceComponentID",
                table: "Appearance");

            migrationBuilder.DropForeignKey(
                name: "FK_Appearance_AppearanceComponent<string>_HeadAppearanceComponentID",
                table: "Appearance");

            migrationBuilder.DropForeignKey(
                name: "FK_Appearance_AppearanceComponent<string>_LegsAppearanceComponentID",
                table: "Appearance");

            migrationBuilder.DropForeignKey(
                name: "FK_Appearance_AppearanceComponent<string>_TailAppearanceComponentID",
                table: "Appearance");

            migrationBuilder.DropForeignKey(
                name: "FK_Appearance_AppearanceComponent<GenitaliaType>_GenitaliaAppearanceComponentID",
                table: "Appearance");

            migrationBuilder.DropForeignKey(
                name: "FK_Appearance_AppearanceComponent<SurfaceType>_SurfaceAppearanceComponentID",
                table: "Appearance");

            migrationBuilder.DropForeignKey(
                name: "FK_Characters_Appearance_DefaultAppearanceAppearanceID",
                table: "Characters");

            migrationBuilder.DropForeignKey(
                name: "FK_Characters_Appearance_TransformedAppearanceAppearanceID",
                table: "Characters");

            migrationBuilder.DropForeignKey(
                name: "FK_Characters_Users_OwnerUserID",
                table: "Characters");

            migrationBuilder.DropForeignKey(
                name: "FK_Characters_Users_UserID",
                table: "Characters");

            migrationBuilder.DropForeignKey(
                name: "FK_Roleplays_Users_OwnerUserID",
                table: "Roleplays");

            migrationBuilder.DropTable(
                name: "Dossiers");

            migrationBuilder.DropTable(
                name: "GlobalPermissions");

            migrationBuilder.DropTable(
                name: "Images");

            migrationBuilder.DropTable(
                name: "LocalPermissions");

            migrationBuilder.DropTable(
                name: "Transformations");

            migrationBuilder.DropTable(
                name: "UserKink");

            migrationBuilder.DropTable(
                name: "UserMessage");

            migrationBuilder.DropTable(
                name: "Species");

            migrationBuilder.DropTable(
                name: "Kinks");

            migrationBuilder.DropTable(
                name: "AppearanceComponent<string>");

            migrationBuilder.DropTable(
                name: "AppearanceComponent<GenitaliaType>");

            migrationBuilder.DropTable(
                name: "AppearanceComponent<SurfaceType>");

            migrationBuilder.DropTable(
                name: "Appearance");

            migrationBuilder.DropTable(
                name: "Users");

            migrationBuilder.DropTable(
                name: "Roleplays");

            migrationBuilder.DropTable(
                name: "Servers");

            migrationBuilder.DropTable(
                name: "Characters");
        }
    }
}
