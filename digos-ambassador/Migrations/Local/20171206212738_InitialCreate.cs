// <auto-generated />
#pragma warning disable CS1591
// ReSharper disable RedundantArgumentDefaultValue
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantUsingDirective
using Microsoft.EntityFrameworkCore.Migrations;
using System;
using System.Collections.Generic;

namespace DIGOS.Ambassador.Migrations.Local
{
    public partial class InitialCreate : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Appearance",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    GenderScale = table.Column<double>(nullable: false),
                    Height = table.Column<double>(nullable: false),
                    Muscularity = table.Column<double>(nullable: false),
                    Weight = table.Column<double>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Appearance", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Colour",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Modifier = table.Column<int>(nullable: true),
                    Shade = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Colour", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Kink",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Category = table.Column<int>(nullable: false),
                    Description = table.Column<string>(nullable: true),
                    FListID = table.Column<uint>(nullable: false),
                    Name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Kink", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Server",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    DiscordID = table.Column<ulong>(nullable: false),
                    IsNSFW = table.Column<bool>(nullable: false),
                    SuppressPermissonWarnings = table.Column<bool>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Server", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Species",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Description = table.Column<string>(nullable: false),
                    Name = table.Column<string>(nullable: false),
                    ParentID = table.Column<uint>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Species", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Species_Species_ParentID",
                        column: x => x.ParentID,
                        principalTable: "Species",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Transformation",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    DefaultBaseColourID = table.Column<uint>(nullable: false),
                    DefaultPattern = table.Column<int>(nullable: true),
                    DefaultPatternColourID = table.Column<uint>(nullable: true),
                    Description = table.Column<string>(nullable: false),
                    GrowMessage = table.Column<string>(nullable: false),
                    IsNSFW = table.Column<bool>(nullable: false),
                    Part = table.Column<int>(nullable: false),
                    ShiftMessage = table.Column<string>(nullable: false),
                    SingleDescription = table.Column<string>(nullable: false),
                    SpeciesID = table.Column<uint>(nullable: false),
                    UniformDescription = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Transformation", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Transformation_Colour_DefaultBaseColourID",
                        column: x => x.DefaultBaseColourID,
                        principalTable: "Colour",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Transformation_Colour_DefaultPatternColourID",
                        column: x => x.DefaultPatternColourID,
                        principalTable: "Colour",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Transformation_Species_SpeciesID",
                        column: x => x.SpeciesID,
                        principalTable: "Species",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AppearanceComponent",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    AppearanceID = table.Column<uint>(nullable: true),
                    BaseColourID = table.Column<uint>(nullable: true),
                    Pattern = table.Column<int>(nullable: true),
                    PatternColourID = table.Column<uint>(nullable: true),
                    Size = table.Column<int>(nullable: false),
                    TransformationID = table.Column<uint>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AppearanceComponent", x => x.ID);
                    table.ForeignKey(
                        name: "FK_AppearanceComponent_Appearance_AppearanceID",
                        column: x => x.AppearanceID,
                        principalTable: "Appearance",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AppearanceComponent_Colour_BaseColourID",
                        column: x => x.BaseColourID,
                        principalTable: "Colour",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AppearanceComponent_Colour_PatternColourID",
                        column: x => x.PatternColourID,
                        principalTable: "Colour",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_AppearanceComponent_Transformation_TransformationID",
                        column: x => x.TransformationID,
                        principalTable: "Transformation",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Characters",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    AvatarUrl = table.Column<string>(nullable: true),
                    CurrentAppearanceID = table.Column<uint>(nullable: true),
                    DefaultAppearanceID = table.Column<uint>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    IsCurrent = table.Column<bool>(nullable: false),
                    IsNSFW = table.Column<bool>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    Nickname = table.Column<string>(nullable: true),
                    OwnerID = table.Column<uint>(nullable: true),
                    PronounProviderFamily = table.Column<string>(nullable: true),
                    Summary = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Characters", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Characters_Appearance_CurrentAppearanceID",
                        column: x => x.CurrentAppearanceID,
                        principalTable: "Appearance",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Characters_Appearance_DefaultAppearanceID",
                        column: x => x.DefaultAppearanceID,
                        principalTable: "Appearance",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Image",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Caption = table.Column<string>(nullable: true),
                    CharacterID = table.Column<uint>(nullable: true),
                    IsNSFW = table.Column<bool>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    Url = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Image", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Image_Characters_CharacterID",
                        column: x => x.CharacterID,
                        principalTable: "Characters",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "UserKink",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    KinkID = table.Column<uint>(nullable: true),
                    Preference = table.Column<int>(nullable: false),
                    UserID = table.Column<uint>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserKink", x => x.ID);
                    table.ForeignKey(
                        name: "FK_UserKink_Kink_KinkID",
                        column: x => x.KinkID,
                        principalTable: "Kink",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "UserIdentifier",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    DiscordID = table.Column<ulong>(nullable: false),
                    RoleplayID = table.Column<uint>(nullable: true),
                    RoleplayID1 = table.Column<uint>(nullable: true),
                    RoleplayID2 = table.Column<uint>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserIdentifier", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Roleplays",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    ActiveChannelID = table.Column<ulong>(nullable: false),
                    IsActive = table.Column<bool>(nullable: false),
                    IsNSFW = table.Column<bool>(nullable: false),
                    IsPublic = table.Column<bool>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    OwnerID = table.Column<uint>(nullable: true),
                    Summary = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Roleplays", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Roleplays_UserIdentifier_OwnerID",
                        column: x => x.OwnerID,
                        principalTable: "UserIdentifier",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "User",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Bio = table.Column<string>(nullable: true),
                    Class = table.Column<int>(nullable: false),
                    IdentifierID = table.Column<uint>(nullable: true),
                    ServerID = table.Column<uint>(nullable: true),
                    Timezone = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_User", x => x.ID);
                    table.ForeignKey(
                        name: "FK_User_UserIdentifier_IdentifierID",
                        column: x => x.IdentifierID,
                        principalTable: "UserIdentifier",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_User_Server_ServerID",
                        column: x => x.ServerID,
                        principalTable: "Server",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "UserProtections",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    HasOptedIn = table.Column<bool>(nullable: false),
                    Type = table.Column<int>(nullable: false),
                    UserID = table.Column<uint>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserProtections", x => x.ID);
                    table.ForeignKey(
                        name: "FK_UserProtections_UserIdentifier_UserID",
                        column: x => x.UserID,
                        principalTable: "UserIdentifier",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LocalPermission",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Permission = table.Column<int>(nullable: false),
                    ServerID = table.Column<uint>(nullable: true),
                    Target = table.Column<int>(nullable: false),
                    UserID = table.Column<uint>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LocalPermission", x => x.ID);
                    table.ForeignKey(
                        name: "FK_LocalPermission_Server_ServerID",
                        column: x => x.ServerID,
                        principalTable: "Server",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LocalPermission_User_UserID",
                        column: x => x.UserID,
                        principalTable: "User",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "UserMessage",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    AuthorID = table.Column<uint>(nullable: true),
                    AuthorNickname = table.Column<string>(nullable: true),
                    Contents = table.Column<string>(nullable: true),
                    DiscordMessageID = table.Column<ulong>(nullable: false),
                    RoleplayID = table.Column<uint>(nullable: true),
                    Timestamp = table.Column<DateTimeOffset>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserMessage", x => x.ID);
                    table.ForeignKey(
                        name: "FK_UserMessage_User_AuthorID",
                        column: x => x.AuthorID,
                        principalTable: "User",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_UserMessage_Roleplays_RoleplayID",
                        column: x => x.RoleplayID,
                        principalTable: "Roleplays",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_AppearanceComponent_AppearanceID",
                table: "AppearanceComponent",
                column: "AppearanceID");

            migrationBuilder.CreateIndex(
                name: "IX_AppearanceComponent_BaseColourID",
                table: "AppearanceComponent",
                column: "BaseColourID");

            migrationBuilder.CreateIndex(
                name: "IX_AppearanceComponent_PatternColourID",
                table: "AppearanceComponent",
                column: "PatternColourID");

            migrationBuilder.CreateIndex(
                name: "IX_AppearanceComponent_TransformationID",
                table: "AppearanceComponent",
                column: "TransformationID");

            migrationBuilder.CreateIndex(
                name: "IX_Characters_CurrentAppearanceID",
                table: "Characters",
                column: "CurrentAppearanceID");

            migrationBuilder.CreateIndex(
                name: "IX_Characters_DefaultAppearanceID",
                table: "Characters",
                column: "DefaultAppearanceID");

            migrationBuilder.CreateIndex(
                name: "IX_Characters_OwnerID",
                table: "Characters",
                column: "OwnerID");

            migrationBuilder.CreateIndex(
                name: "IX_Image_CharacterID",
                table: "Image",
                column: "CharacterID");

            migrationBuilder.CreateIndex(
                name: "IX_LocalPermission_ServerID",
                table: "LocalPermission",
                column: "ServerID");

            migrationBuilder.CreateIndex(
                name: "IX_LocalPermission_UserID",
                table: "LocalPermission",
                column: "UserID");

            migrationBuilder.CreateIndex(
                name: "IX_Roleplays_OwnerID",
                table: "Roleplays",
                column: "OwnerID");

            migrationBuilder.CreateIndex(
                name: "IX_Species_ParentID",
                table: "Species",
                column: "ParentID");

            migrationBuilder.CreateIndex(
                name: "IX_Transformation_DefaultBaseColourID",
                table: "Transformation",
                column: "DefaultBaseColourID");

            migrationBuilder.CreateIndex(
                name: "IX_Transformation_DefaultPatternColourID",
                table: "Transformation",
                column: "DefaultPatternColourID");

            migrationBuilder.CreateIndex(
                name: "IX_Transformation_SpeciesID",
                table: "Transformation",
                column: "SpeciesID");

            migrationBuilder.CreateIndex(
                name: "IX_User_IdentifierID",
                table: "User",
                column: "IdentifierID");

            migrationBuilder.CreateIndex(
                name: "IX_User_ServerID",
                table: "User",
                column: "ServerID");

            migrationBuilder.CreateIndex(
                name: "IX_UserIdentifier_RoleplayID",
                table: "UserIdentifier",
                column: "RoleplayID");

            migrationBuilder.CreateIndex(
                name: "IX_UserIdentifier_RoleplayID1",
                table: "UserIdentifier",
                column: "RoleplayID1");

            migrationBuilder.CreateIndex(
                name: "IX_UserIdentifier_RoleplayID2",
                table: "UserIdentifier",
                column: "RoleplayID2");

            migrationBuilder.CreateIndex(
                name: "IX_UserKink_KinkID",
                table: "UserKink",
                column: "KinkID");

            migrationBuilder.CreateIndex(
                name: "IX_UserKink_UserID",
                table: "UserKink",
                column: "UserID");

            migrationBuilder.CreateIndex(
                name: "IX_UserMessage_AuthorID",
                table: "UserMessage",
                column: "AuthorID");

            migrationBuilder.CreateIndex(
                name: "IX_UserMessage_RoleplayID",
                table: "UserMessage",
                column: "RoleplayID");

            migrationBuilder.CreateIndex(
                name: "IX_UserProtections_UserID",
                table: "UserProtections",
                column: "UserID");

            migrationBuilder.AddForeignKey(
                name: "FK_Characters_UserIdentifier_OwnerID",
                table: "Characters",
                column: "OwnerID",
                principalTable: "UserIdentifier",
                principalColumn: "ID",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_UserKink_User_UserID",
                table: "UserKink",
                column: "UserID",
                principalTable: "User",
                principalColumn: "ID",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_UserIdentifier_Roleplays_RoleplayID",
                table: "UserIdentifier",
                column: "RoleplayID",
                principalTable: "Roleplays",
                principalColumn: "ID",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_UserIdentifier_Roleplays_RoleplayID1",
                table: "UserIdentifier",
                column: "RoleplayID1",
                principalTable: "Roleplays",
                principalColumn: "ID",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_UserIdentifier_Roleplays_RoleplayID2",
                table: "UserIdentifier",
                column: "RoleplayID2",
                principalTable: "Roleplays",
                principalColumn: "ID",
                onDelete: ReferentialAction.Restrict);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Roleplays_UserIdentifier_OwnerID",
                table: "Roleplays");

            migrationBuilder.DropTable(
                name: "AppearanceComponent");

            migrationBuilder.DropTable(
                name: "Image");

            migrationBuilder.DropTable(
                name: "LocalPermission");

            migrationBuilder.DropTable(
                name: "UserKink");

            migrationBuilder.DropTable(
                name: "UserMessage");

            migrationBuilder.DropTable(
                name: "UserProtections");

            migrationBuilder.DropTable(
                name: "Transformation");

            migrationBuilder.DropTable(
                name: "Characters");

            migrationBuilder.DropTable(
                name: "Kink");

            migrationBuilder.DropTable(
                name: "User");

            migrationBuilder.DropTable(
                name: "Colour");

            migrationBuilder.DropTable(
                name: "Species");

            migrationBuilder.DropTable(
                name: "Appearance");

            migrationBuilder.DropTable(
                name: "Server");

            migrationBuilder.DropTable(
                name: "UserIdentifier");

            migrationBuilder.DropTable(
                name: "Roleplays");
        }
    }
}
