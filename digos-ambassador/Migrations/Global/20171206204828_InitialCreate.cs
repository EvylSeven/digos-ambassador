// <auto-generated />
#pragma warning disable CS1591
// ReSharper disable RedundantArgumentDefaultValue
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantUsingDirective
using Microsoft.EntityFrameworkCore.Migrations;
using System;
using System.Collections.Generic;

namespace DIGOS.Ambassador.Migrations.Global
{
    public partial class InitialCreate : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Colour",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Modifier = table.Column<int>(nullable: true),
                    Shade = table.Column<int>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Colour", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Dossiers",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Path = table.Column<string>(nullable: true),
                    Summary = table.Column<string>(nullable: true),
                    Title = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Dossiers", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Images",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Caption = table.Column<string>(nullable: true),
                    IsNSFW = table.Column<bool>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    Url = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Images", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Kinks",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Category = table.Column<int>(nullable: false),
                    Description = table.Column<string>(nullable: true),
                    FListID = table.Column<uint>(nullable: false),
                    Name = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Kinks", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Servers",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    DiscordID = table.Column<ulong>(nullable: false),
                    IsNSFW = table.Column<bool>(nullable: false),
                    SuppressPermissonWarnings = table.Column<bool>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Servers", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "Species",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Description = table.Column<string>(nullable: false),
                    Name = table.Column<string>(nullable: false),
                    ParentID = table.Column<uint>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Species", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Species_Species_ParentID",
                        column: x => x.ParentID,
                        principalTable: "Species",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Transformations",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    DefaultBaseColourID = table.Column<uint>(nullable: false),
                    DefaultPattern = table.Column<int>(nullable: true),
                    DefaultPatternColourID = table.Column<uint>(nullable: true),
                    Description = table.Column<string>(nullable: false),
                    GrowMessage = table.Column<string>(nullable: false),
                    IsNSFW = table.Column<bool>(nullable: false),
                    Part = table.Column<int>(nullable: false),
                    ShiftMessage = table.Column<string>(nullable: false),
                    SingleDescription = table.Column<string>(nullable: false),
                    SpeciesID = table.Column<uint>(nullable: false),
                    UniformDescription = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Transformations", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Transformations_Colour_DefaultBaseColourID",
                        column: x => x.DefaultBaseColourID,
                        principalTable: "Colour",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Transformations_Colour_DefaultPatternColourID",
                        column: x => x.DefaultPatternColourID,
                        principalTable: "Colour",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Transformations_Species_SpeciesID",
                        column: x => x.SpeciesID,
                        principalTable: "Species",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Bio = table.Column<string>(nullable: true),
                    Class = table.Column<int>(nullable: false),
                    DiscordID = table.Column<ulong>(nullable: false),
                    GlobalUserProtectionID = table.Column<uint>(nullable: true),
                    GlobalUserProtectionID1 = table.Column<uint>(nullable: true),
                    ServerID = table.Column<uint>(nullable: true),
                    Timezone = table.Column<int>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Users_Servers_ServerID",
                        column: x => x.ServerID,
                        principalTable: "Servers",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "GlobalPermissions",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Permission = table.Column<int>(nullable: false),
                    Target = table.Column<int>(nullable: false),
                    UserID = table.Column<uint>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GlobalPermissions", x => x.ID);
                    table.ForeignKey(
                        name: "FK_GlobalPermissions_Users_UserID",
                        column: x => x.UserID,
                        principalTable: "Users",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "GlobalUserProtections",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    DefaultOptIn = table.Column<bool>(nullable: false),
                    DefaultType = table.Column<int>(nullable: false),
                    UserID = table.Column<uint>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_GlobalUserProtections", x => x.ID);
                    table.ForeignKey(
                        name: "FK_GlobalUserProtections_Users_UserID",
                        column: x => x.UserID,
                        principalTable: "Users",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "LocalPermissions",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Permission = table.Column<int>(nullable: false),
                    ServerID = table.Column<uint>(nullable: true),
                    Target = table.Column<int>(nullable: false),
                    UserID = table.Column<uint>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_LocalPermissions", x => x.ID);
                    table.ForeignKey(
                        name: "FK_LocalPermissions_Servers_ServerID",
                        column: x => x.ServerID,
                        principalTable: "Servers",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_LocalPermissions_Users_UserID",
                        column: x => x.UserID,
                        principalTable: "Users",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "UserKink",
                columns: table => new
                {
                    ID = table.Column<uint>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    KinkID = table.Column<uint>(nullable: true),
                    Preference = table.Column<int>(nullable: false),
                    UserID = table.Column<uint>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_UserKink", x => x.ID);
                    table.ForeignKey(
                        name: "FK_UserKink_Kinks_KinkID",
                        column: x => x.KinkID,
                        principalTable: "Kinks",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_UserKink_Users_UserID",
                        column: x => x.UserID,
                        principalTable: "Users",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_GlobalPermissions_UserID",
                table: "GlobalPermissions",
                column: "UserID");

            migrationBuilder.CreateIndex(
                name: "IX_GlobalUserProtections_UserID",
                table: "GlobalUserProtections",
                column: "UserID");

            migrationBuilder.CreateIndex(
                name: "IX_LocalPermissions_ServerID",
                table: "LocalPermissions",
                column: "ServerID");

            migrationBuilder.CreateIndex(
                name: "IX_LocalPermissions_UserID",
                table: "LocalPermissions",
                column: "UserID");

            migrationBuilder.CreateIndex(
                name: "IX_Species_ParentID",
                table: "Species",
                column: "ParentID");

            migrationBuilder.CreateIndex(
                name: "IX_Transformations_DefaultBaseColourID",
                table: "Transformations",
                column: "DefaultBaseColourID");

            migrationBuilder.CreateIndex(
                name: "IX_Transformations_DefaultPatternColourID",
                table: "Transformations",
                column: "DefaultPatternColourID");

            migrationBuilder.CreateIndex(
                name: "IX_Transformations_SpeciesID",
                table: "Transformations",
                column: "SpeciesID");

            migrationBuilder.CreateIndex(
                name: "IX_UserKink_KinkID",
                table: "UserKink",
                column: "KinkID");

            migrationBuilder.CreateIndex(
                name: "IX_UserKink_UserID",
                table: "UserKink",
                column: "UserID");

            migrationBuilder.CreateIndex(
                name: "IX_Users_GlobalUserProtectionID",
                table: "Users",
                column: "GlobalUserProtectionID");

            migrationBuilder.CreateIndex(
                name: "IX_Users_GlobalUserProtectionID1",
                table: "Users",
                column: "GlobalUserProtectionID1");

            migrationBuilder.CreateIndex(
                name: "IX_Users_ServerID",
                table: "Users",
                column: "ServerID");

            migrationBuilder.AddForeignKey(
                name: "FK_Users_GlobalUserProtections_GlobalUserProtectionID",
                table: "Users",
                column: "GlobalUserProtectionID",
                principalTable: "GlobalUserProtections",
                principalColumn: "ID",
                onDelete: ReferentialAction.Restrict);

            migrationBuilder.AddForeignKey(
                name: "FK_Users_GlobalUserProtections_GlobalUserProtectionID1",
                table: "Users",
                column: "GlobalUserProtectionID1",
                principalTable: "GlobalUserProtections",
                principalColumn: "ID",
                onDelete: ReferentialAction.Restrict);
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_GlobalUserProtections_Users_UserID",
                table: "GlobalUserProtections");

            migrationBuilder.DropTable(
                name: "Dossiers");

            migrationBuilder.DropTable(
                name: "GlobalPermissions");

            migrationBuilder.DropTable(
                name: "Images");

            migrationBuilder.DropTable(
                name: "LocalPermissions");

            migrationBuilder.DropTable(
                name: "Transformations");

            migrationBuilder.DropTable(
                name: "UserKink");

            migrationBuilder.DropTable(
                name: "Colour");

            migrationBuilder.DropTable(
                name: "Species");

            migrationBuilder.DropTable(
                name: "Kinks");

            migrationBuilder.DropTable(
                name: "Users");

            migrationBuilder.DropTable(
                name: "GlobalUserProtections");

            migrationBuilder.DropTable(
                name: "Servers");
        }
    }
}
