// <auto-generated />
#pragma warning disable CS1591
// ReSharper disable RedundantArgumentDefaultValue
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantUsingDirective
using System.Linq;
using DIGOS.Ambassador.Database;
using DIGOS.Ambassador.Database.Appearances;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Migrations;

namespace DIGOS.Ambassador.Migrations
{
    public partial class FixBadAppearanceData : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            var options = GlobalInfoContext.ConfigureOptions(new DbContextOptionsBuilder()).Options;
            using (var db = new GlobalInfoContext(options))
            {
                var characters = db.Characters
                    .Include(c => c.CurrentAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.Transformation.Species)
                    .Include(c => c.CurrentAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.Transformation.DefaultPatternColour)
                    .Include(c => c.CurrentAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.Transformation.DefaultBaseColour)
                    .Include(c => c.CurrentAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.BaseColour)
                    .Include(c => c.CurrentAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.PatternColour)
                    .Include(c => c.DefaultAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.Transformation.Species)
                    .Include(c => c.DefaultAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.Transformation.DefaultPatternColour)
                    .Include(c => c.DefaultAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.Transformation.DefaultBaseColour)
                    .Include(c => c.DefaultAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.BaseColour)
                    .Include(c => c.DefaultAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.PatternColour)
                    .ToList();

                foreach (var character in characters)
                {
                    if (character.DefaultAppearance.ID == character.CurrentAppearance.ID)
                    {
                        // Create new replacement appearances
                        var newDefaultAppearance = Appearance.CopyFrom(character.CurrentAppearance);
                        var newCurrentAppearance = Appearance.CopyFrom(newDefaultAppearance);

                        // Delete the old ones
                        db.Remove(character.DefaultAppearance);
                        db.Remove(character.CurrentAppearance);

                        // and reassign the new ones
                        character.DefaultAppearance = newDefaultAppearance;
                        character.CurrentAppearance = newCurrentAppearance;
                    }
                }

                db.SaveChanges();
            }
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            var options = GlobalInfoContext.ConfigureOptions(new DbContextOptionsBuilder()).Options;
            using (var db = new GlobalInfoContext(options))
            {
                var characters = db.Characters
                    .Include(c => c.CurrentAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.Transformation.Species)
                    .Include(c => c.CurrentAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.Transformation.DefaultPatternColour)
                    .Include(c => c.CurrentAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.Transformation.DefaultBaseColour)
                    .Include(c => c.CurrentAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.BaseColour)
                    .Include(c => c.CurrentAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.PatternColour)
                    .Include(c => c.DefaultAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.Transformation.Species)
                    .Include(c => c.DefaultAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.Transformation.DefaultPatternColour)
                    .Include(c => c.DefaultAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.Transformation.DefaultBaseColour)
                    .Include(c => c.DefaultAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.BaseColour)
                    .Include(c => c.DefaultAppearance)
                    .ThenInclude(a => a.Components)
                    .ThenInclude(c => c.PatternColour)
                    .ToList();

                foreach (var character in characters)
                {
                    // Break the data by using the same object
                    character.DefaultAppearance = character.CurrentAppearance;
                }

                db.SaveChanges();
            }
        }
    }
}