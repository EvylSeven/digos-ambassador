// <auto-generated />
#pragma warning disable CS1591
// ReSharper disable RedundantArgumentDefaultValue
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantUsingDirective
using DIGOS.Ambassador.Database;
using DIGOS.Ambassador.Database.Appearances;
using DIGOS.Ambassador.Database.Kinks;
using DIGOS.Ambassador.Database.Users;
using DIGOS.Ambassador.Permissions;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DIGOS.Ambassador.Migrations
{
    [DbContext(typeof(GlobalInfoContext))]
    partial class GlobalInfoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("DIGOS.Ambassador.Database.Appearances.Appearance", b =>
                {
                    b.Property<uint>("AppearanceID")
                        .ValueGeneratedOnAdd();

                    b.Property<uint?>("ArmsAppearanceComponentID");

                    b.Property<uint?>("BodyAppearanceComponentID");

                    b.Property<uint?>("EyesAppearanceComponentID");

                    b.Property<float>("GenderScale");

                    b.Property<uint?>("GenitaliaAppearanceComponentID");

                    b.Property<uint?>("HairAppearanceComponentID");

                    b.Property<uint?>("HeadAppearanceComponentID");

                    b.Property<float>("Height");

                    b.Property<uint?>("LegsAppearanceComponentID");

                    b.Property<float>("Muscularity");

                    b.Property<uint?>("SurfaceAppearanceComponentID");

                    b.Property<uint?>("TailAppearanceComponentID");

                    b.Property<float>("Weight");

                    b.HasKey("AppearanceID");

                    b.HasIndex("ArmsAppearanceComponentID");

                    b.HasIndex("BodyAppearanceComponentID");

                    b.HasIndex("EyesAppearanceComponentID");

                    b.HasIndex("GenitaliaAppearanceComponentID");

                    b.HasIndex("HairAppearanceComponentID");

                    b.HasIndex("HeadAppearanceComponentID");

                    b.HasIndex("LegsAppearanceComponentID");

                    b.HasIndex("SurfaceAppearanceComponentID");

                    b.HasIndex("TailAppearanceComponentID");

                    b.ToTable("Appearance");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Appearances.AppearanceComponent<DIGOS.Ambassador.Database.Appearances.GenitaliaType>", b =>
                {
                    b.Property<uint>("AppearanceComponentID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BaseColour");

                    b.Property<int>("Description");

                    b.Property<bool>("Exists");

                    b.Property<string>("Pattern");

                    b.Property<string>("PatternColour");

                    b.Property<int>("Size");

                    b.HasKey("AppearanceComponentID");

                    b.ToTable("AppearanceComponent<GenitaliaType>");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Appearances.AppearanceComponent<DIGOS.Ambassador.Database.Appearances.SurfaceType>", b =>
                {
                    b.Property<uint>("AppearanceComponentID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BaseColour");

                    b.Property<int>("Description");

                    b.Property<bool>("Exists");

                    b.Property<string>("Pattern");

                    b.Property<string>("PatternColour");

                    b.Property<int>("Size");

                    b.HasKey("AppearanceComponentID");

                    b.ToTable("AppearanceComponent<SurfaceType>");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Appearances.AppearanceComponent<string>", b =>
                {
                    b.Property<uint>("AppearanceComponentID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BaseColour");

                    b.Property<string>("Description");

                    b.Property<bool>("Exists");

                    b.Property<string>("Pattern");

                    b.Property<string>("PatternColour");

                    b.Property<int>("Size");

                    b.HasKey("AppearanceComponentID");

                    b.ToTable("AppearanceComponent<string>");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Characters.Character", b =>
                {
                    b.Property<uint>("CharacterID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AvatarUrl");

                    b.Property<uint?>("DefaultAppearanceAppearanceID");

                    b.Property<string>("Description");

                    b.Property<bool>("IsNSFW");

                    b.Property<string>("Name");

                    b.Property<string>("Nickname");

                    b.Property<uint?>("OwnerUserID");

                    b.Property<string>("Summary");

                    b.Property<uint?>("TransformedAppearanceAppearanceID");

                    b.Property<uint?>("UserID");

                    b.HasKey("CharacterID");

                    b.HasIndex("DefaultAppearanceAppearanceID");

                    b.HasIndex("OwnerUserID");

                    b.HasIndex("TransformedAppearanceAppearanceID");

                    b.HasIndex("UserID");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Data.Image", b =>
                {
                    b.Property<uint>("ImageID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caption");

                    b.Property<uint?>("CharacterID");

                    b.Property<bool>("IsNSFW");

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.HasKey("ImageID");

                    b.HasIndex("CharacterID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Dossiers.Dossier", b =>
                {
                    b.Property<uint>("DossierID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.Property<string>("Summary");

                    b.Property<string>("Title");

                    b.HasKey("DossierID");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Kinks.Kink", b =>
                {
                    b.Property<uint>("KinkID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Category");

                    b.Property<string>("Description");

                    b.Property<uint>("FListID");

                    b.Property<string>("Name");

                    b.HasKey("KinkID");

                    b.ToTable("Kinks");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Permissions.GlobalPermission", b =>
                {
                    b.Property<uint>("GlobalPermissionID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Permission");

                    b.Property<int>("Target");

                    b.Property<uint?>("UserID");

                    b.HasKey("GlobalPermissionID");

                    b.HasIndex("UserID");

                    b.ToTable("GlobalPermissions");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Permissions.LocalPermission", b =>
                {
                    b.Property<uint>("LocalPermissionID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Permission");

                    b.Property<uint?>("ServerID");

                    b.Property<int>("Target");

                    b.Property<uint?>("UserID");

                    b.HasKey("LocalPermissionID");

                    b.HasIndex("ServerID");

                    b.HasIndex("UserID");

                    b.ToTable("LocalPermissions");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Roleplaying.Roleplay", b =>
                {
                    b.Property<uint>("RoleplayID")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("ActiveChannelID");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsNSFW");

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Name");

                    b.Property<uint?>("OwnerUserID");

                    b.Property<string>("Summary");

                    b.HasKey("RoleplayID");

                    b.HasIndex("OwnerUserID");

                    b.ToTable("Roleplays");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Roleplaying.UserMessage", b =>
                {
                    b.Property<uint>("UserMessageID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuthorNickname");

                    b.Property<uint?>("AuthorUserID");

                    b.Property<string>("Contents");

                    b.Property<ulong>("DiscordMessageID");

                    b.Property<uint?>("RoleplayID");

                    b.Property<DateTimeOffset>("Timestamp");

                    b.HasKey("UserMessageID");

                    b.HasIndex("AuthorUserID");

                    b.HasIndex("RoleplayID");

                    b.ToTable("UserMessage");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.ServerInfo.Server", b =>
                {
                    b.Property<uint>("ServerID")
                        .ValueGeneratedOnAdd();

                    b.Property<uint?>("CharacterID");

                    b.Property<ulong>("DiscordGuildID");

                    b.Property<bool>("IsNSFW");

                    b.Property<bool>("SuppressPermissonWarnings");

                    b.HasKey("ServerID");

                    b.HasIndex("CharacterID");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Users.User", b =>
                {
                    b.Property<uint>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bio");

                    b.Property<int>("Class");

                    b.Property<uint?>("DefaultCharacterCharacterID");

                    b.Property<ulong>("DiscordID");

                    b.Property<uint?>("RoleplayID");

                    b.Property<uint?>("RoleplayID1");

                    b.Property<uint?>("RoleplayID2");

                    b.Property<uint?>("ServerID");

                    b.Property<int?>("Timezone");

                    b.HasKey("UserID");

                    b.HasIndex("DefaultCharacterCharacterID");

                    b.HasIndex("RoleplayID");

                    b.HasIndex("RoleplayID1");

                    b.HasIndex("RoleplayID2");

                    b.HasIndex("ServerID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Users.UserKink", b =>
                {
                    b.Property<uint>("UserKinkID")
                        .ValueGeneratedOnAdd();

                    b.Property<uint?>("KinkID");

                    b.Property<int>("Preference");

                    b.Property<uint?>("UserID");

                    b.HasKey("UserKinkID");

                    b.HasIndex("KinkID");

                    b.HasIndex("UserID");

                    b.ToTable("UserKink");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Appearances.Appearance", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Database.Appearances.AppearanceComponent<string>", "Arms")
                        .WithMany()
                        .HasForeignKey("ArmsAppearanceComponentID");

                    b.HasOne("DIGOS.Ambassador.Database.Appearances.AppearanceComponent<string>", "Body")
                        .WithMany()
                        .HasForeignKey("BodyAppearanceComponentID");

                    b.HasOne("DIGOS.Ambassador.Database.Appearances.AppearanceComponent<string>", "Eyes")
                        .WithMany()
                        .HasForeignKey("EyesAppearanceComponentID");

                    b.HasOne("DIGOS.Ambassador.Database.Appearances.AppearanceComponent<DIGOS.Ambassador.Database.Appearances.GenitaliaType>", "Genitalia")
                        .WithMany()
                        .HasForeignKey("GenitaliaAppearanceComponentID");

                    b.HasOne("DIGOS.Ambassador.Database.Appearances.AppearanceComponent<string>", "Hair")
                        .WithMany()
                        .HasForeignKey("HairAppearanceComponentID");

                    b.HasOne("DIGOS.Ambassador.Database.Appearances.AppearanceComponent<string>", "Head")
                        .WithMany()
                        .HasForeignKey("HeadAppearanceComponentID");

                    b.HasOne("DIGOS.Ambassador.Database.Appearances.AppearanceComponent<string>", "Legs")
                        .WithMany()
                        .HasForeignKey("LegsAppearanceComponentID");

                    b.HasOne("DIGOS.Ambassador.Database.Appearances.AppearanceComponent<DIGOS.Ambassador.Database.Appearances.SurfaceType>", "Surface")
                        .WithMany()
                        .HasForeignKey("SurfaceAppearanceComponentID");

                    b.HasOne("DIGOS.Ambassador.Database.Appearances.AppearanceComponent<string>", "Tail")
                        .WithMany()
                        .HasForeignKey("TailAppearanceComponentID");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Characters.Character", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Database.Appearances.Appearance", "DefaultAppearance")
                        .WithMany()
                        .HasForeignKey("DefaultAppearanceAppearanceID");

                    b.HasOne("DIGOS.Ambassador.Database.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUserID");

                    b.HasOne("DIGOS.Ambassador.Database.Appearances.Appearance", "TransformedAppearance")
                        .WithMany()
                        .HasForeignKey("TransformedAppearanceAppearanceID");

                    b.HasOne("DIGOS.Ambassador.Database.Users.User")
                        .WithMany("Characters")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Data.Image", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Database.Characters.Character")
                        .WithMany("Images")
                        .HasForeignKey("CharacterID");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Permissions.GlobalPermission", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Database.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Permissions.LocalPermission", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Database.ServerInfo.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID");

                    b.HasOne("DIGOS.Ambassador.Database.Users.User")
                        .WithMany("LocalPermissions")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Roleplaying.Roleplay", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Database.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerUserID");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Roleplaying.UserMessage", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Database.Users.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorUserID");

                    b.HasOne("DIGOS.Ambassador.Database.Roleplaying.Roleplay")
                        .WithMany("Messages")
                        .HasForeignKey("RoleplayID");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.ServerInfo.Server", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Database.Characters.Character")
                        .WithMany("CurrentServers")
                        .HasForeignKey("CharacterID");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Users.User", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Database.Characters.Character", "DefaultCharacter")
                        .WithMany()
                        .HasForeignKey("DefaultCharacterCharacterID");

                    b.HasOne("DIGOS.Ambassador.Database.Roleplaying.Roleplay")
                        .WithMany("InvitedUsers")
                        .HasForeignKey("RoleplayID");

                    b.HasOne("DIGOS.Ambassador.Database.Roleplaying.Roleplay")
                        .WithMany("KickedUsers")
                        .HasForeignKey("RoleplayID1");

                    b.HasOne("DIGOS.Ambassador.Database.Roleplaying.Roleplay")
                        .WithMany("Participants")
                        .HasForeignKey("RoleplayID2");

                    b.HasOne("DIGOS.Ambassador.Database.ServerInfo.Server")
                        .WithMany("KnownUsers")
                        .HasForeignKey("ServerID");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Users.UserKink", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Database.Kinks.Kink", "Kink")
                        .WithMany()
                        .HasForeignKey("KinkID");

                    b.HasOne("DIGOS.Ambassador.Database.Users.User")
                        .WithMany("Kinks")
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
