// <auto-generated />
#pragma warning disable CS1591
// ReSharper disable RedundantArgumentDefaultValue
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantUsingDirective
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace DIGOS.Ambassador.Migrations
{
    public partial class RemoveTransformationEntities : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            // And again...
            /*
            migrationBuilder.DropForeignKey(
                name: "FK_Users_Servers_ServerID",
                schema: "Core",
                table: "Users");

            migrationBuilder.DropTable(
                name: "Images",
                schema: "CharacterModule");

            migrationBuilder.DropTable(
                name: "AppearanceConfigurations",
                schema: "TransformationModule");

            migrationBuilder.DropTable(
                name: "ServerUserProtections",
                schema: "TransformationModule");

            migrationBuilder.DropTable(
                name: "Characters",
                schema: "CharacterModule");

            migrationBuilder.DropTable(
                name: "CharacterRoles",
                schema: "CharacterModule");

            migrationBuilder.DropTable(
                name: "Servers",
                schema: "Core");

            migrationBuilder.DropIndex(
                name: "IX_Users_ServerID",
                schema: "Core",
                table: "Users");

            migrationBuilder.DropColumn(
                name: "ServerID",
                schema: "Core",
                table: "Users");
            */
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            // And again...
            /*
            migrationBuilder.EnsureSchema(
                name: "CharacterModule");

            migrationBuilder.AddColumn<long>(
                name: "ServerID",
                schema: "Core",
                table: "Users",
                nullable: true);

            migrationBuilder.CreateTable(
                name: "Servers",
                schema: "Core",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn),
                    DedicatedRoleplayChannelsCategory = table.Column<long>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    DiscordID = table.Column<long>(nullable: false),
                    IsNSFW = table.Column<bool>(nullable: false),
                    JoinMessage = table.Column<string>(nullable: true),
                    SendJoinMessage = table.Column<bool>(nullable: false),
                    SuppressPermissonWarnings = table.Column<bool>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Servers", x => x.ID);
                });

            migrationBuilder.CreateTable(
                name: "CharacterRoles",
                schema: "CharacterModule",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn),
                    Access = table.Column<int>(nullable: false),
                    DiscordID = table.Column<long>(nullable: false),
                    ServerID = table.Column<long>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CharacterRoles", x => x.ID);
                    table.ForeignKey(
                        name: "FK_CharacterRoles_Servers_ServerID",
                        column: x => x.ServerID,
                        principalSchema: "Core",
                        principalTable: "Servers",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ServerUserProtections",
                schema: "TransformationModule",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn),
                    HasOptedIn = table.Column<bool>(nullable: false),
                    ServerID = table.Column<long>(nullable: false),
                    Type = table.Column<int>(nullable: false),
                    UserID = table.Column<long>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ServerUserProtections", x => x.ID);
                    table.ForeignKey(
                        name: "FK_ServerUserProtections_Servers_ServerID",
                        column: x => x.ServerID,
                        principalSchema: "Core",
                        principalTable: "Servers",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ServerUserProtections_Users_UserID",
                        column: x => x.UserID,
                        principalSchema: "Core",
                        principalTable: "Users",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Characters",
                schema: "CharacterModule",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn),
                    AvatarUrl = table.Column<string>(nullable: true),
                    Description = table.Column<string>(nullable: true),
                    IsCurrent = table.Column<bool>(nullable: false),
                    IsDefault = table.Column<bool>(nullable: false),
                    IsNSFW = table.Column<bool>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    Nickname = table.Column<string>(nullable: true),
                    OwnerID = table.Column<long>(nullable: false),
                    PronounProviderFamily = table.Column<string>(nullable: true),
                    RoleID = table.Column<long>(nullable: true),
                    ServerID = table.Column<long>(nullable: false),
                    Summary = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Characters", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Characters_Users_OwnerID",
                        column: x => x.OwnerID,
                        principalSchema: "Core",
                        principalTable: "Users",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Characters_CharacterRoles_RoleID",
                        column: x => x.RoleID,
                        principalSchema: "CharacterModule",
                        principalTable: "CharacterRoles",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Images",
                schema: "CharacterModule",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn),
                    Caption = table.Column<string>(nullable: true),
                    CharacterID = table.Column<long>(nullable: true),
                    IsNSFW = table.Column<bool>(nullable: false),
                    Name = table.Column<string>(nullable: true),
                    Url = table.Column<string>(nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Images", x => x.ID);
                    table.ForeignKey(
                        name: "FK_Images_Characters_CharacterID",
                        column: x => x.CharacterID,
                        principalSchema: "CharacterModule",
                        principalTable: "Characters",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "AppearanceConfigurations",
                schema: "TransformationModule",
                columns: table => new
                {
                    ID = table.Column<long>(nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn),
                    CharacterID = table.Column<long>(nullable: false),
                    CurrentAppearanceID = table.Column<long>(nullable: false),
                    DefaultAppearanceID = table.Column<long>(nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AppearanceConfigurations", x => x.ID);
                    table.ForeignKey(
                        name: "FK_AppearanceConfigurations_Characters_CharacterID",
                        column: x => x.CharacterID,
                        principalSchema: "CharacterModule",
                        principalTable: "Characters",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AppearanceConfigurations_Appearances_CurrentAppearanceID",
                        column: x => x.CurrentAppearanceID,
                        principalSchema: "TransformationModule",
                        principalTable: "Appearances",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AppearanceConfigurations_Appearances_DefaultAppearanceID",
                        column: x => x.DefaultAppearanceID,
                        principalSchema: "TransformationModule",
                        principalTable: "Appearances",
                        principalColumn: "ID",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Users_ServerID",
                schema: "Core",
                table: "Users",
                column: "ServerID");

            migrationBuilder.CreateIndex(
                name: "IX_CharacterRoles_ServerID",
                schema: "CharacterModule",
                table: "CharacterRoles",
                column: "ServerID");

            migrationBuilder.CreateIndex(
                name: "IX_Characters_OwnerID",
                schema: "CharacterModule",
                table: "Characters",
                column: "OwnerID");

            migrationBuilder.CreateIndex(
                name: "IX_Characters_RoleID",
                schema: "CharacterModule",
                table: "Characters",
                column: "RoleID");

            migrationBuilder.CreateIndex(
                name: "IX_Images_CharacterID",
                schema: "CharacterModule",
                table: "Images",
                column: "CharacterID");

            migrationBuilder.CreateIndex(
                name: "IX_AppearanceConfigurations_CharacterID",
                schema: "TransformationModule",
                table: "AppearanceConfigurations",
                column: "CharacterID");

            migrationBuilder.CreateIndex(
                name: "IX_AppearanceConfigurations_CurrentAppearanceID",
                schema: "TransformationModule",
                table: "AppearanceConfigurations",
                column: "CurrentAppearanceID");

            migrationBuilder.CreateIndex(
                name: "IX_AppearanceConfigurations_DefaultAppearanceID",
                schema: "TransformationModule",
                table: "AppearanceConfigurations",
                column: "DefaultAppearanceID");

            migrationBuilder.CreateIndex(
                name: "IX_ServerUserProtections_ServerID",
                schema: "TransformationModule",
                table: "ServerUserProtections",
                column: "ServerID");

            migrationBuilder.CreateIndex(
                name: "IX_ServerUserProtections_UserID",
                schema: "TransformationModule",
                table: "ServerUserProtections",
                column: "UserID");

            migrationBuilder.AddForeignKey(
                name: "FK_Users_Servers_ServerID",
                schema: "Core",
                table: "Users",
                column: "ServerID",
                principalSchema: "Core",
                principalTable: "Servers",
                principalColumn: "ID",
                onDelete: ReferentialAction.Restrict);
            */
        }
    }
}
