// <auto-generated />
#pragma warning disable CS1591
// ReSharper disable RedundantArgumentDefaultValue
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantUsingDirective
using DIGOS.Ambassador.Database;
using DIGOS.Ambassador.Database.Appearances;
using DIGOS.Ambassador.Database.Kinks;
using DIGOS.Ambassador.Database.Users;
using DIGOS.Ambassador.Permissions;
using DIGOS.Ambassador.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using System;

namespace DIGOS.Ambassador.Migrations.Global
{
    [DbContext(typeof(GlobalInfoContext))]
    [Migration("20171206212724_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("DIGOS.Ambassador.Database.Appearances.Colour", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Modifier");

                    b.Property<int>("Shade");

                    b.HasKey("ID");

                    b.ToTable("Colour");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Data.Image", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caption");

                    b.Property<bool>("IsNSFW");

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.HasKey("ID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Dossiers.Dossier", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Path");

                    b.Property<string>("Summary");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("Dossiers");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Kinks.Kink", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Category");

                    b.Property<string>("Description");

                    b.Property<uint>("FListID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Kinks");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Permissions.GlobalPermission", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Permission");

                    b.Property<int>("Target");

                    b.Property<uint?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("GlobalPermissions");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Permissions.LocalPermission", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Permission");

                    b.Property<uint?>("ServerID");

                    b.Property<int>("Target");

                    b.Property<uint?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("ServerID");

                    b.HasIndex("UserID");

                    b.ToTable("LocalPermissions");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.ServerInfo.Server", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("DiscordID");

                    b.Property<bool>("IsNSFW");

                    b.Property<bool>("SuppressPermissonWarnings");

                    b.HasKey("ID");

                    b.ToTable("Servers");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Transformations.GlobalUserProtection", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("DefaultOptIn");

                    b.Property<int>("DefaultType");

                    b.Property<uint?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("GlobalUserProtections");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Transformations.Species", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<uint?>("ParentID");

                    b.HasKey("ID");

                    b.HasIndex("ParentID");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Transformations.Transformation", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<uint>("DefaultBaseColourID");

                    b.Property<int?>("DefaultPattern");

                    b.Property<uint?>("DefaultPatternColourID");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("GrowMessage")
                        .IsRequired();

                    b.Property<bool>("IsNSFW");

                    b.Property<int>("Part");

                    b.Property<string>("ShiftMessage")
                        .IsRequired();

                    b.Property<string>("SingleDescription")
                        .IsRequired();

                    b.Property<uint>("SpeciesID");

                    b.Property<string>("UniformDescription");

                    b.HasKey("ID");

                    b.HasIndex("DefaultBaseColourID");

                    b.HasIndex("DefaultPatternColourID");

                    b.HasIndex("SpeciesID");

                    b.ToTable("Transformations");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Users.User", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bio");

                    b.Property<int>("Class");

                    b.Property<uint?>("GlobalUserProtectionID");

                    b.Property<uint?>("GlobalUserProtectionID1");

                    b.Property<uint?>("IdentifierID");

                    b.Property<uint?>("ServerID");

                    b.Property<int?>("Timezone");

                    b.HasKey("ID");

                    b.HasIndex("GlobalUserProtectionID");

                    b.HasIndex("GlobalUserProtectionID1");

                    b.HasIndex("IdentifierID");

                    b.HasIndex("ServerID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Users.UserIdentifier", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("DiscordID");

                    b.HasKey("ID");

                    b.ToTable("UserIdentifier");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Users.UserKink", b =>
                {
                    b.Property<uint>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<uint?>("KinkID");

                    b.Property<int>("Preference");

                    b.Property<uint?>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("KinkID");

                    b.HasIndex("UserID");

                    b.ToTable("UserKink");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Permissions.GlobalPermission", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Database.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Permissions.LocalPermission", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Database.ServerInfo.Server", "Server")
                        .WithMany()
                        .HasForeignKey("ServerID");

                    b.HasOne("DIGOS.Ambassador.Database.Users.User")
                        .WithMany("LocalPermissions")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Transformations.GlobalUserProtection", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Database.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Transformations.Species", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Database.Transformations.Species", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Transformations.Transformation", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Database.Appearances.Colour", "DefaultBaseColour")
                        .WithMany()
                        .HasForeignKey("DefaultBaseColourID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DIGOS.Ambassador.Database.Appearances.Colour", "DefaultPatternColour")
                        .WithMany()
                        .HasForeignKey("DefaultPatternColourID");

                    b.HasOne("DIGOS.Ambassador.Database.Transformations.Species", "Species")
                        .WithMany()
                        .HasForeignKey("SpeciesID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Users.User", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Database.Transformations.GlobalUserProtection")
                        .WithMany("Blacklist")
                        .HasForeignKey("GlobalUserProtectionID");

                    b.HasOne("DIGOS.Ambassador.Database.Transformations.GlobalUserProtection")
                        .WithMany("Whitelist")
                        .HasForeignKey("GlobalUserProtectionID1");

                    b.HasOne("DIGOS.Ambassador.Database.Users.UserIdentifier", "Identifier")
                        .WithMany()
                        .HasForeignKey("IdentifierID");

                    b.HasOne("DIGOS.Ambassador.Database.ServerInfo.Server")
                        .WithMany("KnownUsers")
                        .HasForeignKey("ServerID");
                });

            modelBuilder.Entity("DIGOS.Ambassador.Database.Users.UserKink", b =>
                {
                    b.HasOne("DIGOS.Ambassador.Database.Kinks.Kink", "Kink")
                        .WithMany()
                        .HasForeignKey("KinkID");

                    b.HasOne("DIGOS.Ambassador.Database.Users.User")
                        .WithMany("Kinks")
                        .HasForeignKey("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
